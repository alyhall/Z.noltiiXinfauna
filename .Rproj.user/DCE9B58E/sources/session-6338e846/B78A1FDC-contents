## Header and Preamble ------------------------------------------------------------
##
## Script name: Data Formatting
##
## Purpose of script: Pooling raw data and creating + exportig data files so we 
##    don't have to reload in all the data every time 
##
## Author: Alyson Hall
##
## Date Created: 2024-07-22
## Date Edited:  2024-07-22
##
## Copyright (c) Alyson Hall, 2024
## Email: achall@vims.edu
##

## Notes:
##
##
##
##

## Load up the packages we will need:
library(readxl)
library(tidyverse)
library(ggplot2)
library(tibbletime)
library(dplyr)
library(lubridate)
library(gridExtra)
library(openxlsx)
load("Scripts/read_hobo_csv_TL.Rdata") # Homemade function for reading in hobo loggers

##
## When using or reading my code, I recommended turning on code soft-wrap.
########End


# DO  ------------------------------------------------


# Getting DO data into R 
DO_file.list <- list.files(path = "C:/Users/achall/OneDrive - vims.edu/Documents/Research/Chambers/Data/Cat_DO",
                           pattern=".*.TXT",
                           full.names = TRUE,
                           recursive = TRUE) %>% 
  purrr::set_names()

Datafiles <- map_dfr(DO_file.list, function(x)read.table(x, header=T, skip = 8), .id = "Sensor")

Datafiles <- set_names(Datafiles, nm = c("Sensor", "UTC_Date", "UTC_time", 
                                         "EST_Date", "EST_time", 
                                         "Battery", "temp", "DO_mg",
                                         "DO_per", "Q"))
rownames(Datafiles) <- NULL

#Changing id to sensor number
Datafiles$Sensor <- (sapply(strsplit(Datafiles$Sensor, "_"), "[[", 4))
Datafiles$Sensor <- (sapply(strsplit(Datafiles$Sensor, "C[Aa][Tt]"), "[[", 1))

#Removing the comma that is after the columns, clumsy and should be improved
Datafiles$EST_time <- (sapply(strsplit(Datafiles$EST_time, ","), "[[", 1))
Datafiles$temp <- (sapply(strsplit(Datafiles$temp, ","), "[[", 1))
Datafiles$DO_mg <- (sapply(strsplit(Datafiles$DO_mg, ","), "[[", 1))

#Make numeric
Datafiles$temp <- as.numeric(Datafiles$temp)
Datafiles$DO_mg <- as.numeric(Datafiles$DO_mg)

#changing to datetime format so we can subtract times
Datafiles$Datetime <- paste(Datafiles$EST_Date, Datafiles$EST_time)
Datafiles$Datetime <- as_datetime(Datafiles$Datetime)


#Adding in Treatment excel 
DO_id_treatment <- read_excel("Data/Environment/2022_Biomass_Environment.xlsx", sheet = 1) %>% 
  filter(!Sensor == "NA")

DO_id_treatment$DT_Start <- paste(DO_id_treatment$DT_Start)
DO_id_treatment$DT_Start <- as_datetime(DO_id_treatment$DT_Start)
DO_id_treatment$DT_End <- as_datetime(DO_id_treatment$DT_End)

#Sensor fix
Datafiles$Sensor <- as.character(Datafiles$Sensor)
Datafiles$EST_Date <- as_date(Datafiles$EST_Date)
DO_id_treatment$Sensor <- as.character(DO_id_treatment$Sensor)
DO_id_treatment <- DO_id_treatment %>% select(-Incu_Start, -Incu_End)  

#Merge All
DO <- DO_id_treatment %>% 
  filter(!Species == "Light") %>% 
  full_join(Datafiles, by = c("Date" = "EST_Date", "Sensor")) %>% 
  filter(!Sensor == "NA") %>% 
  filter(!Chamber == "NA") %>% 
  unique()

DO$DT_Dur <- difftime(DO$DT_End, DO$Datetime, units = c("mins"))
DO <- DO %>%
  filter(DT_Dur >= 0) #Gets rid of all the times after the end

DO$DT_Dur <- difftime(DO$Datetime, DO$DT_Start, units = c("mins"))

# now filter to only 1-120 mins of Incu_Dur
# Filtering a bit extra off the start
DO <- DO %>%
  filter(DT_Dur > 10 & DT_Dur < 121) 

DO$Chamber <- as.factor(DO$Chamber)

DO$DO_mg <- as.numeric(DO$DO_mg)


##Create slopes between each min 

#Test <- DO %>%
# group_by(Species, Treatment, Chamber) %>%
# arrange(Species, DT_Dur) %>%
# mutate(lagged_DO = lag(DO_mg, n = 1)) %>%
# mutate(rate = 100 * (DO_mg - lagged_DO)/lagged_DO) %>%
#select(DO_mg, lagged_DO, rate, DT_Dur) #testing that lag(DO_mg) is working as it should and taking from t+1


#This gets us rates of mg O2 per 7 L per min
#My chambers were 7 liters
#
#DO_7_L_rate <- DO %>%
#group_by(Species, Treatment, Chamber, EST_Date, GPS_Point) %>%
##  mutate(rate = 100 * (DO_mg - lag(DO_mg, n = 1))/lag(DO_mg, n = 1)) %>%
#  select(DO_mg, rate, DT_Dur,  EST_Date, Site, Biomass)
DO_7_L_rate <- DO %>%
  group_by(Species, Treatment, Chamber, Date, GPS_Point) %>%
  arrange(Species, DT_Dur) %>% 
  mutate(rate = (DO_mg - lag(DO_mg, n = 1))) %>% 
  select(Chamber:Treatment, DT_Start:DT_End, temp:rate)

#Scaling to get the rates in per liter
DO_rate <- DO_7_L_rate
DO_rate$rate <- DO_rate$rate/7
DO_rate$rate <- DO_rate$rate/0.0324 #to get to m2

#Scaling by ABG Biomass: Units now mg O2 per L per min per mg ABG Dried Biomass
#ADD IN COLUMN FOR CHAMBER FOOTPRINT (NO BIOMASS)


# Export DO Data as Excel 
openxlsx::write.xlsx(x = DO_rate, file = "Data/Exported_Data/DO.xlsx")



# Above Biomass -----------------------------------------------------------

Biomass <- read_excel("Data/Environment/2022_Biomass_Environment.xlsx", sheet = 3)

#Create a df with above ground biomass and Epi for ASU
Above <- Biomass %>% 
  # Remove belowground biomass (MAYBE NOT DO)
  filter(Type == "Above" | Type == "Other_Above" | Species == "ASU") %>% 
  # Remove all 2021 Biomass
  filter(year(Sample_Date) == "2022") %>% 
  filter(!Biomass < 0)

##NOTES FOR LATER
# Some rows with biomass, but no sample???
# There are some missing samples... (either in field (2) or one in freezer)

# Mutate so there is a column for Biomass for target species (T_Above) and
# all above ground biomass in sample (A_Above), copy T_Above if no extra sample

# Currently not accounting for Epi biomass on chambers

# Fix no biomass for ASUs! use case when to put in!

Above2 <-
  Above %>% 
    select(Species:Type, TSC:Ash_Free) %>% 
    pivot_wider(values_from = c(Biomass, Ash_Free, TSC),
                names_from = Type) %>% 
  mutate(T_Above_Bio = case_when(
                        Species == "ASU" ~ as.numeric(Biomass_Epi),
                        Species == "Sediment" ~ as.numeric(Biomass_Above),
                        Species == "Rm" ~ as.numeric(Biomass_Above),
                        Species == "Zm" ~ as.numeric(Biomass_Above),
                        TRUE ~ as.numeric(Biomass_Above)),
         A_Above_Bio = as.numeric(Biomass_Above) + as.numeric(Biomass_Other_Above),
         T_Above_Ash = case_when(
           Species == "ASU" ~ as.numeric(Ash_Free_Epi),
           Species == "Sediment" ~ as.numeric(Ash_Free_Above),
           Species == "Rm" ~ as.numeric(Ash_Free_Above),
           Species == "Zm" ~ as.numeric(Ash_Free_Above),
           TRUE ~ as.numeric(Ash_Free_Above)),
         A_Above_Ash = as.numeric(Ash_Free_Above) + as.numeric(Ash_Free_Other_Above),
         T_TSC = as.numeric(TSC_Above),
         A_TSC = as.numeric(TSC_Above) + as.numeric(TSC_Other_Above)) %>% 
    select(Species:Chamber, T_Above_Bio:A_TSC) %>% 
    mutate(A_Above_Bio = coalesce(A_Above_Bio, T_Above_Bio),
           A_Above_Ash = coalesce(A_Above_Ash, T_Above_Ash),
           A_TSC = coalesce(A_TSC, T_TSC),
           T_Ratio = round(T_Above_Bio/A_Above_Bio, digits = 2),
           Zm_Ratio = case_when(Species == "Zm" ~ T_Ratio,
                                Species == "Rm" ~ 1-T_Ratio,
                                TRUE ~ NA)) %>% 
  select(!Processing_Date)
  
# Export DO Data as Excel 
openxlsx::write.xlsx(x = Above2, file = "Data/Exported_Data/Biomass.xlsx")



# Light Data --------------------------------------------------------------

# LIGHT DATA IN WRONG DATETIME?? DO in military time, Light only morning??
# recheck how it is being read in.....

# Getting the data in
load("Scripts/read_hobo_csv_TL.Rdata")
Light.list <- list.files(path = "Data/Hobo",
                         pattern = "\\.csv$",
                         full.names = TRUE,
                         recursive = TRUE) %>% 
  purrr::set_names()

Light <- map_dfr(Light.list, read_hobo_csv_TL, .id = "Sensor")

DO_id_treatment <- read_excel("Data/Environment/2022_Biomass_Environment.xlsx", sheet = 1)

Light_id_treatment <- filter(DO_id_treatment, Species == "Light")


# Cleaning Light Data
# Changing Column Names
Light <- set_names(Light, nm = c("Sensor", "Logger_SN", 
                                 "Datetime", "Date", 
                                 "Time", "Temp_C", "Lux"))

# Changing Logger to sensor number and removig perm for now
Light$Sensor <- (sapply(strsplit(Light$Sensor, "/"), "[[", 4))
Light$Sensor <- (sapply(strsplit(Light$Sensor, "_"), "[[", 2))
Light$Sensor <- (sapply(strsplit(Light$Sensor, ".csv"), "[[", 1))

Light <- Light %>% filter(!(Sensor == "(perm)" | Sensor == "Perm"))

# Hobo loggers are in UTC
Light$Date <- as.Date(Light$Date, tryFormats = c("%m/%d/%Y"))
Light$Datetime <- paste(Light$Date, Light$Time)
Light$Datetime <- as.POSIXct(Light$Datetime, tz = 'UTC')



# Merge Light and ID treatment by Light df
L_Treatment <- as.tibble(
  Light %>% 
  mutate(Sensor = as.numeric(Sensor)) %>% 
  left_join(Light_id_treatment, by = c("Date", "Sensor")) %>% 
  filter(!Species == "NA") %>% 
  select(Treatment, 
         Date, 
         Time,
         Sensor, 
         DT_Start,
         DT_End,
         Datetime, 
         Site, 
         Lux) ) %>% 
        mutate(Date = as.Date(Date))

# Remove all extra times that aren't during the incubation

# Look at difference between end time and sensor time
L_Treatment$DT_Run <- 
  difftime(L_Treatment$DT_End, L_Treatment$Datetime, units = c("mins"))

L_Treatment <- 
  L_Treatment %>%
  filter(DT_Run >= 0) # Gets rid of times before the incubation

# Calculates run time of the incubation
L_Treatment$DT_Dur <- 
  difftime(L_Treatment$Datetime, L_Treatment$DT_Start, units = c("mins"))

L_Treatment <- L_Treatment %>%
  filter(DT_Dur >= 0) # Gets rid of times after the incubation

# testLight <- L_Treatment %>%
#   filter(Date == "2022-06-06")

## Unit Conversions 

## **Write a package that does this for HOBO loggers**
#Excels read in light measurements as lux, but we want to get to PAR!
#lux is equal to lumens per sq meter. 
#multiply lumen by 0.001496 to get to Watt

L_Treatment$Watt <- L_Treatment$Lux*0.001496

#Watt is equal to joule per sec (1:1). multipy joule by 0.2389 to get to grams per calorie

L_Treatment$gcal <- L_Treatment$Watt*0.2389 
#Maybe not right.... can I ignore the /sec?

#Assuming mean wavelength of 550 nm or 5500 A so 1 Einstein = 52 x 10^3 g cal, we can convert g cal to Einsteins by dividing by 52 x 10^3.

L_Treatment$Ein <- L_Treatment$gcal/(52*10^3)

#Lets get to micro Ein

L_Treatment$uEin <- L_Treatment$Ein*(1*10^6)

#Hobos measure full spectrum (I think) so we need to get to PAR only

L_Treatment$InstantPAR <- L_Treatment$uEin*0.43

# Export Light Data as Excel - more raw data
openxlsx::write.xlsx(x = L_Treatment, file = "Data/Exported_Data/Light_raw.xlsx")



# Now create a light file that has per site:
Mean_Light <- 
  L_Treatment %>% 
  group_by(Datetime, Treatment) %>%
  summarise(u_Light = mean(InstantPAR, na.rm = TRUE),
            sd_Light = sd(InstantPAR, na.rm = TRUE)) %>% 
  # Need to transform and save it as wide format so we can add it to the 
  # other data types
  pivot_wider(names_from = Treatment,
              values_from = c(u_Light, sd_Light)) 



# Export Mean Light Data as Excel 
openxlsx::write.xlsx(x = Mean_Light, file = "Data/Exported_Data/Mean_Light.xlsx")

#NOTES:
# All loggers broken from 8/18/22 so no light data



# Leaf Area ---------------------------------------------------------------

# Loading in Data (only leaves from the dominant species in chamber)

# All_LA <- 
#   list.files(path = "Data/Leaf_Area/Excel",
#              pattern='*.xlsx', 
#              full.names = TRUE) %>%
#   map_df(read_excel) %>%
#   select(-Average_Area) %>%
#   rename("Site" = "Location")
# 
# # Separate Chamber header by chamber number and replicate leaf number
# All_LA <- separate(All_LA, Chamber, c("Chamber", "Leaf")) 
# 
# # Export so we can edit a master sheet to fix mistakes
# 
# write.csv(All_LA,"All_LA.csv", row.names = FALSE)

# Read in corrected LA excel

# Read in treatment excel 
All_LA <- 
  read_excel("Data/Leaf_Area/All_LA.xlsx") %>% 
  mutate(Chamber = as.factor(Chamber))

Treatments <- 
  read_excel("Data/Environment/2022_Biomass_Environment.xlsx",
             sheet = 1) %>% 
  select(Chamber:Treatment) %>% 
  mutate(Chamber = as.factor(Chamber))


Treatments$Chamber <- as.factor(Treatments$Chamber)

All_LA$Site <- case_when(All_LA$Site == "GM" ~ "Guinea Marsh", 
                         All_LA$Site == "Guinea_Marsh" ~ "Guinea Marsh",
                         All_LA$Site == "4PtM" ~ "Four Points Marsh",
                         All_LA$Site == "Pepper_Creek" ~ "Pepper Creek",
                         All_LA$Site == "DM" ~ "Dameron Marsh",
                         All_LA$Site == "Poq" ~ "Poquoson",
                         All_LA$Site == "Browns_Bay_South" ~ "Browns Bay South",
                         All_LA$Site == "Browns Bay" ~ "Browns Bay South",
                         All_LA$Site == "BBS" ~ "Browns Bay South",
                         All_LA$Site == "Hungars_Shoal" ~ "Hungars Shoal",
                         All_LA$Site == "HS" ~ "Hungars Shoal",
                         All_LA$Site == "PC" ~ "Pepper Creek",
                         TRUE ~ All_LA$Site)

# unique(All_LA$Site) #Checking to make sure they are all the same


#Remove 2021 Dates
All_LA <- 
  All_LA %>% 
    filter(!year(Date) == "2021")

LA <- 
  Treatments %>% 
  filter(!Species == "Light") %>% 
  filter(!Species == "ASU") %>% 
  filter(!Species == "Sediment") %>% 
  full_join(All_LA) %>% 
  filter(!Site == "NA")

# # Trouble shooting
# # Need to find mismatched biomass samples....
# 
# 
# write.csv(LA,"LAfixtest.csv", row.names = FALSE)

# For earlier dates (5/23) before leaf area meter, can we use an average width?

LA %>% 
  filter(Site == "Guinea Marsh") %>%
  filter(!Species == "Rm") %>% 
  ggplot(aes(x = as.factor(Date), y = Average_Width)) +
  stat_summary(fun = "mean", geom = "bar") +
  geom_boxplot(aes(fill = ))

# Lookig at the shape of the data
LA %>% 
  filter(Site == "Guinea Marsh") %>%
  filter(!Species == "Rm") %>% 
  ggplot(aes(x = Average_Width)) +
  geom_histogram()

# Skewed data so Median for two months was 0.3 cm... use that?

LA <- LA %>% 
  # replace with median of 0.3
  
  mutate(Average_Width = replace_na(Average_Width, 0.3),
         
         # calculate areas based on width*length if missing
         
         Area = ifelse(is.na(Area), Length*Average_Width, Area),
         
         # x2 for both sides of leaf
        
         Area = Area*2) 

# Get averages per leaf and then by Chamber with matching date
LA_Average_Leaf <- 
  LA %>%
    group_by(Date, Site, Chamber, Species, Leaf) %>%
    summarise(U_Leaf_width = mean(Average_Width), 
              sd_Leaf_width = sd(Average_Width),
              U_Leaf_Area = mean(Area),
              sd_Leaf_Area = sd(Area),
              U_Leaf_Length = mean(Length),
              sd_Leaf_Length = sd(Length)) %>% 
    filter(!Species == "NA")


# Write new excel for average leaf - raw
write.xlsx(x = LA_Average_Leaf, file = "Data/Exported_Data/LA_Leaf_Average.xlsx")

# Now calculate chamber average LA

LA_Average_Chamber <- 
  LA %>%
  group_by(Date, Site, Species, Chamber) %>%
  summarise(U_Leaf_width = mean(Average_Width), 
            sd_Leaf_width = sd(Average_Width),
            U_Leaf_Area = mean(Area),
            sd_Leaf_Area = sd(Area),
            U_Leaf_Length = mean(Length),
            sd_Leaf_Length = sd(Length)) %>% 
  filter(!Species == "NA")

# Write new excel for average leaf - per chamber
write.xlsx(x = LA_Average_Chamber, file = "Data/Exported_Data/LA_Chamber_Average.xlsx")





# Above / Belowground Biomass ---------------------------------------------

ABRs <- 
  read_excel("Data/Environment/2022_Biomass_Environment.xlsx", sheet = 3) %>% 
  filter(Type == "Above" | Type == "Below") %>% 
  select(Species:Sample_Date, Chamber:Type, Biomass:Ash_Free) %>% 
  mutate(Biomass = as.numeric(Biomass),
         Ash_Free = as.numeric(Ash_Free)) %>% 
  pivot_wider(names_from = Type,
              values_from = c(Biomass, Ash_Free)) %>% 
  mutate(ABR_Bio = Biomass_Above/Biomass_Below,
         ABR_AF = Ash_Free_Above/Ash_Free_Below)

# Write new excel for Ag/Bg Bio
write.xlsx(x = ABRs, file = "Data/Exported_Data/ABRs.xlsx")


# Mega DS Creation --------------------------------------------------------
DO_data <- 
  read_excel("Data/Exported_data/DO.xlsx") %>% 
  mutate(Date = as.Date(Date)) %>% 
  select(!GPS_Point) %>% 
  filter(!Site == "Dameron Marsh")

Biomass <-  
  read_excel("Data/Exported_data/Biomass.xlsx") %>% 
  rename(Date = Sample_Date)

Light <- 
  as.tibble(
    read_excel("Data/Exported_data/Mean_Light.xlsx") %>% 
      # Removing sd of light since most times they are NA since no replicates
      select(!starts_with("sd_")) )

# Some dates will have multiple light poles (sd) while others will only have 1 
# this is due to some of the Hobo pendents being broken

LA_Average <- 
  read_excel("Data/Exported_data/LA_Chamber_Average.xlsx") %>% 
  select(Date:Chamber, U_Leaf_Area:sd_Leaf_Area)

Treatment <- 
  read_excel("Data/Environment/2022_Biomass_Environment.xlsx", sheet = 1) %>% 
  select(Chamber:Sensor, GPS_Point:Depth_End, DT_Start:DT_End) %>% 
  filter(!Species == "Light") %>% 
  filter(!Site == "Dameron Marsh")

Env <- 
  read_excel("Data/Environment/2022_Biomass_Environment.xlsx", sheet = 4) %>% 
  select(Site:Date, Temp:Pres) %>% 
  filter(!Site == "Dameron Marsh")

ABRs <- 
  read_excel("Data/Exported_data/ABRs.xlsx") %>% 
  select(Species:Chamber, ABR_Bio, ABR_AF) %>% 
  rename(Date = Sample_Date)


# Link Data to Each Other 

# Can't join with light yet... make light for whole day instead

# full_join(Light, by = c("Date", 
#                         "Treatment", 
#                         "Sensor", 
#                         "Site", 
#                         "Datetime"))

# Create a useful df full of all info about chambers

Constants <-
  Treatment %>% 
  full_join(Env, by = c("Date",
                        "Site")) %>% 
  full_join(Biomass, by = c("Date", 
                            "Chamber",
                            "Species",
                            "Treatment")) %>% 
  full_join(LA_Average, by = c("Date", 
                               "Chamber",
                               "Species",
                               "Site")) %>% 
  full_join(ABRs, by = c("Date", 
                         "Chamber",
                         "Species",
                         "Treatment")) %>% 
  select(!Temp)



MegaDS <- 
  DO_data %>% 
  full_join(Light, by = c("Datetime")) %>% 
  full_join(Constants, by = c("Date", 
                              "Chamber", 
                              "Species", 
                              "Treatment",
                              "Site",
                              "DT_Start",
                              "DT_End")) %>% 
  filter(!rate == "NA") %>% 
  filter(!year(Datetime) == "2021") %>% 
  mutate(DT_Dur = round(as.numeric(DT_Dur)),
         Sample_Month = month(Date),
         Sample_Hour = hour(Date),
         Date = as_date(Date))

# Calculate Biomass rate:

MegaDS <-
  MegaDS %>% 
  mutate(A_Bio_rate = rate/A_Above_Bio,
         T_Bio_rate = rate/T_Above_Bio,
         A_Bio_rate = coalesce(A_Bio_rate, rate),
         T_Bio_rate = coalesce(T_Bio_rate, rate))
# Copy sediment back over so not NA (no biomass)


# Calculate NPP from NEP using sediment blanks

# Export Data as Excel 
openxlsx::write.xlsx(x = MegaDS, file = "Data/Exported_Data/MegaDS.xlsx")



# Metabolism Components by GPS and Site -----------------------------------

# THESE ARE CORRECTED BY BIOMASS BECAUSE THEY HAVE TO BE

# Lets start with calculating GPP for the incubation periods
# Grass GPP = (Grass NEP - sediment NEP) - (Grass Respiration + Sediment R?)
# Grass NPP = NEP - Sediment NEP
# Grass R = CR - Sediment R

# First create an average of fluxes per day per GPS Point

# # Get averages per day for sites without a paired GPS with sediment 
# MegaDS %>% 
#   filter(Species == "Sediment") %>% 
#   reframe(
#     across(c(rate), c(mean = mean, sd = sd), .unpack = TRUE),
#     .by = c(Date, Treatment)) %>% 
#   filter(month(Date) == 6)

# calculating average light and temp

Light_Temp_GPS <-
  MegaDS %>% 
  filter(!Species == "ASU") %>% 
  filter(!Species == "Flower_Rm") %>% 
  reframe(
    across(c(u_Light_Bottom, temp), c(mean = mean, sd = sd), .unpack = TRUE),
    .by = c(Date, GPS_Point, Species))

Light_Temp_Site <-
  MegaDS %>% 
  filter(!Species == "ASU") %>% 
  filter(!Species == "Flower_Rm") %>% 
  reframe(
    across(c(u_Light_Bottom, temp), c(mean = mean, sd = sd), .unpack = TRUE),
    .by = c(Date, Species))

# MUST CALCULATE WITH BIOMASS CORRECTED

GPS_Avg <- 
  MegaDS %>% 
  mutate(Date = as_date(Date)) %>% 
  filter(!Species == "ASU") %>% 
  filter(!Species == "Flower_Rm") %>% 
  reframe(
    across(c(A_Bio_rate), c(mean = mean, sd = sd), .unpack = TRUE),
    .by = c(Date, GPS_Point, Species, Treatment)) %>% 
  mutate(rate_mean = A_Bio_rate_mean,
         rate_sd = A_Bio_rate_sd) %>% 
  select(!c(A_Bio_rate_mean, A_Bio_rate_sd)) %>% 
  pivot_wider(
    names_from = c(Treatment, Species), 
    values_from = c(rate_mean, rate_sd)) %>%
  mutate(
    rate_mean_Light_Sediment = case_when(
      Date == "2022-05-23" ~ 0.0144,
      Date == "2022-06-06" ~ 0.0267,
      Date == "2022-06-24" ~ 0.00984,
      TRUE ~ rate_mean_Light_Sediment),
    rate_mean_Dark_Sediment = case_when(
      Date == "2022-05-23" ~ -0.00483,
      Date == "2022-06-06" ~ -0.00152,
      Date == "2022-06-24" ~ -0.0256,
      TRUE ~ rate_mean_Dark_Sediment),
    rate_sd_Light_Sediment = case_when(
      Date == "2022-05-23" ~ 0.0650,
      Date == "2022-06-06" ~ 0.106,
      Date == "2022-06-24" ~ 0.0922,
      TRUE ~ rate_sd_Light_Sediment),
    rate_sd_Dark_Sediment = case_when(
      Date == "2022-05-23" ~ 0.0445,
      Date == "2022-06-06" ~ 0.0468,
      Date == "2022-06-24" ~ 0.113,
      TRUE ~ rate_sd_Dark_Sediment)) %>%
  # Getting rid of gps poinst where there was only sediement
  filter(!c(rate_mean_Light_Rm == "NA" & rate_mean_Light_Zm == "NA")) %>% 
  group_by(Date, GPS_Point) %>%
  summarise(
    Zm_NPP = (rate_mean_Light_Zm - rate_mean_Light_Sediment), #this is adding back the O2 from the sediment only!
    Rm_NPP = (rate_mean_Light_Rm - rate_mean_Light_Sediment),
    Zm_R = (rate_mean_Dark_Zm - rate_mean_Dark_Sediment),
    Rm_R = (rate_mean_Dark_Rm - rate_mean_Dark_Sediment),
    Zm_CR = (rate_mean_Dark_Zm),
    Rm_CR = (rate_mean_Dark_Rm),
    Zm_NEP = (rate_mean_Light_Zm),
    Rm_NEP = (rate_mean_Light_Rm),
    Zm_GPP = (Zm_NPP - rate_mean_Dark_Zm), #this is adding back O2 from sediment and plant R!
    Rm_GPP = (Rm_NPP - rate_mean_Dark_Rm),
    Zm_NPP_sd = sqrt(rate_sd_Light_Zm^2 + rate_sd_Light_Sediment^2),
    Rm_NPP_sd = sqrt(rate_sd_Light_Rm^2 + rate_sd_Light_Sediment^2),
    Zm_R_sd = sqrt(rate_sd_Dark_Zm^2 + rate_sd_Dark_Sediment^2),
    Rm_R_sd = sqrt(rate_sd_Dark_Rm^2 + rate_sd_Dark_Sediment^2),
    Rm_CR_sd = (rate_sd_Dark_Rm),
    Zm_CR_sd = (rate_sd_Dark_Zm),
    Rm_NEP_sd = (rate_sd_Light_Rm),
    Zm_NEP_sd = (rate_sd_Light_Zm),
    Zm_GPP_sd = sqrt(Zm_NPP_sd^2 + rate_sd_Light_Zm^2),
    Rm_GPP_sd = sqrt(Rm_NPP_sd^2 + rate_sd_Light_Rm^2)) %>% 
  pivot_longer(cols = Zm_NPP:Rm_GPP_sd,
               names_to = c("Species", ".value"),
               names_pattern = '(.*?)_(.*)') %>% 
  left_join(Constants %>% 
              mutate(Sample_Month = month(Date),
                     Sample_Hour = hour(round_date(DT_Start, "hour")),
                     Date = as_date(Date))) %>% 
  left_join(Light_Temp_GPS) %>% 
  ungroup() %>% 
  select(!c(Chamber, 
            Treatment:Sensor, 
            DT_Start:DT_End,
            T_Above_Bio:ABR_AF)) %>% 
  unique()

# Export Data as Excel 
openxlsx::write.xlsx(x = GPS_Avg, file = "Data/Exported_Data/GPS_Avg.xlsx")

# # Get averages per day for sites without a paired GPS with sediment 
# MegaDS %>% 
#   filter(Species == "Sediment") %>% 
#   reframe(
#     across(c(rate), c(mean = mean, sd = sd), .unpack = TRUE),
#     .by = c(Date, Treatment)) %>% 
#   filter(month(Date) == 6)

Site_Avg <- 
  MegaDS %>% 
  filter(!Species == "ASU") %>% 
  filter(!Species == "Flower_Rm") %>% 
  reframe(
    across(c(A_Bio_rate), c(mean = mean, sd = sd), .unpack = TRUE),
    .by = c(Date, Species, Treatment)) %>% 
  mutate(rate_mean = A_Bio_rate_mean,
         rate_sd = A_Bio_rate_sd) %>% 
  select(!c(A_Bio_rate_mean, A_Bio_rate_sd)) %>% 
  pivot_wider(
    names_from = c(Treatment, Species), 
    values_from = c(rate_mean, rate_sd)) %>%
  group_by(Date) %>%
  summarise(
    Zm_NPP = (rate_mean_Light_Zm - rate_mean_Light_Sediment), #this is adding back the O2 from the sediment only!
    Rm_NPP = (rate_mean_Light_Rm - rate_mean_Light_Sediment),
    Zm_R = (rate_mean_Dark_Zm - rate_mean_Dark_Sediment),
    Rm_R = (rate_mean_Dark_Rm - rate_mean_Dark_Sediment),
    Zm_CR = (rate_mean_Dark_Zm),
    Rm_CR = (rate_mean_Dark_Rm),
    Zm_NEP = (rate_mean_Light_Zm),
    Rm_NEP = (rate_mean_Light_Rm),
    Zm_GPP = (Zm_NPP - rate_mean_Dark_Zm), #this is adding back O2 from sediment and plant R!
    Rm_GPP = (Rm_NPP - rate_mean_Dark_Rm),
    Zm_NPP_sd = sqrt(rate_sd_Light_Zm^2 + rate_sd_Light_Sediment^2),
    Rm_NPP_sd = sqrt(rate_sd_Light_Rm^2 + rate_sd_Light_Sediment^2),
    Zm_R_sd = sqrt(rate_sd_Dark_Zm^2 + rate_sd_Dark_Sediment^2),
    Rm_R_sd = sqrt(rate_sd_Dark_Rm^2 + rate_sd_Dark_Sediment^2),
    Rm_CR_sd = (rate_sd_Dark_Rm),
    Zm_CR_sd = (rate_sd_Dark_Zm),
    Rm_NEP_sd = (rate_sd_Light_Rm),
    Zm_NEP_sd = (rate_sd_Light_Zm),
    Zm_GPP_sd = sqrt(Zm_NPP_sd^2 + rate_sd_Light_Zm^2),
    Rm_GPP_sd = sqrt(Rm_NPP_sd^2 + rate_sd_Light_Rm^2)) %>% 
  pivot_longer(cols = Zm_NPP:Rm_GPP_sd,
               names_to = c("Species", ".value"),
               names_pattern = '(.*?)_(.*)') %>% 
  ungroup() %>% 
  left_join(Constants %>% 
              group_by(Date, Species) %>% 
              summarise(Sample_Month = month(Date),
                        Sample_Hour = median(hour(round_date(DT_Start, "hour"))),
                        Date = as_date(Date)) %>% 
              unique()) %>%
  left_join(Constants) %>% 
  left_join(Light_Temp_Site) %>% 
  mutate(Sample_Month = month(Date),
         Sample_Hour = hour(DT_Start),
         Date = as_date(Date)) %>% 
  ungroup() %>% 
  select(!c(Chamber, 
            GPS_Point,
            Treatment:Sensor, 
            DT_Start:DT_End,
            T_Above_Bio:ABR_AF)) %>% 
  unique()

# Export Data as Excel 
openxlsx::write.xlsx(x = Site_Avg, file = "Data/Exported_Data/Site_Avg.xlsx")
